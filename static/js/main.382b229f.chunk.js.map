{"version":3,"sources":["components/Clock.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","today","Date","state","time","getHours","getMinutes","getSeconds","toLocaleString","this","intervalID","setInterval","tick","clearInterval","setState","React","Component","App","className","width","height","xmlns","fill-rule","clip-rule","d","style","marginLeft","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8MAoCeA,E,YAjCX,WAAYC,GAAO,IAAD,sBACd,4CAAMA,IAEN,IAAIC,EAAQ,IAAIC,KAHF,OAId,EAAKC,MAAM,CACPC,KAAKH,EAAMI,WAAa,IAAMJ,EAAMK,aAAe,IAAML,EAAMM,aAAaC,kBALlE,E,iFAQG,IAAD,OAChBC,KAAKC,WAAaC,aAChB,kBAAM,EAAKC,SACX,O,6CAIFC,cAAcJ,KAAKC,c,6BAGnB,IAAIT,EAAQ,IAAIC,KAChBO,KAAKK,SAAS,CACZV,KAAMH,EAAMI,WAAa,IAAMJ,EAAMK,aAAe,IAAML,EAAMM,aAAaC,qB,+BAK/E,OACI,2BACKC,KAAKN,MAAMC,U,GA5BPW,IAAMC,WCmBZC,MAlBf,WAEE,OACE,6BACA,yBAAKC,UAAU,QACb,yBAAKC,MAAM,KAAKC,OAAO,KAAKC,MAAM,6BAA6BC,YAAU,UAAUC,YAAU,WAAU,0BAAMC,EAAE,+KAC/G,0BAAMC,MAAO,CAACC,WAAW,KAAzB,gBACF,yBAAKR,UAAU,aAEb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,gBAAf,IAA+B,kBAAC,EAAD,WCDnBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.382b229f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Clock  extends React.Component {    \r\n    constructor(props){\r\n        super(props);\r\n        \r\n        var today = new Date();\r\n        this.state={\r\n            time:today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds().toLocaleString()\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.intervalID = setInterval(\r\n          () => this.tick(),\r\n          1000\r\n        );\r\n      }\r\n      componentWillUnmount() {\r\n        clearInterval(this.intervalID);\r\n      }\r\n      tick() {\r\n        var today = new Date();\r\n        this.setState({\r\n          time: today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds().toLocaleString()\r\n        });\r\n      }\r\n    render() { \r\n        \r\n        return ( \r\n            <p>\r\n                {this.state.time}\r\n            </p>\r\n            );\r\n    }\r\n}\r\n \r\nexport default Clock;","import React from 'react';\nimport './style.css'\nimport Clock from './components/Clock'\nfunction App() {\n  \n  return (\n    <div>\n    <div className=\"head\">\n      <svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"><path d=\"M12 0c6.623 0 12 5.377 12 12s-5.377 12-12 12-12-5.377-12-12 5.377-12 12-12zm0 1c6.071 0 11 4.929 11 11s-4.929 11-11 11-11-4.929-11-11 4.929-11 11-11zm0 11h6v1h-7v-9h1v8z\"/></svg>\n      <span style={{marginLeft:20}}>React Clock</span></div>\n    <div className=\"container\">\n      \n      <div className=\"clock-container\">\n        <div className=\"clock-circle\"> <Clock/></div>\n         \n      </div>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}